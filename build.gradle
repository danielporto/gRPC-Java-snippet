// using gradle 6.7.1

plugins {
    // Provide convenience executables for trying out the examples.
    id 'application'
    // ASSUMES GRADLE 5.6 OR HIGHER. Use plugin version 0.8.10 with earlier gradle versions
    id 'com.google.protobuf' version '0.8.17'
    // Generate IntelliJ IDEA's .idea & .iml project files
    id 'idea'
    // java stuff
    id 'java'
    //id 'checkstyle'
    //id 'findbugs'
    //id 'pmd'
}

repositories {
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/maven2/" }
    mavenCentral()
    mavenLocal()
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = 'com.example.grpc.Main'
project.version ='1.1'
description = 'A simple gRPC example'


// updating the version in our release process.
def grpcVersion = '1.39.0' // CURRENT_GRPC_VERSION
def protobufVersion = '3.17.2'
def protocVersion = protobufVersion

dependencies {
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    compileOnly "org.apache.tomcat:annotations-api:6.0.53"


    // command line argument parsing
    // https://mvnrepository.com/artifact/commons-cli/commons-cli
    implementation "commons-cli:commons-cli:1.4"

    //logging
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12
    implementation "org.slf4j:slf4j-api:1.7.25"
    implementation "org.slf4j:slf4j-log4j12:1.7.25"

    // examples/advanced need this for JsonFormat
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"

    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"

    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-core:3.4.0"
}


protobuf {
  protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
  plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }

  generateProtoTasks.generatedFilesBaseDir = 'src-gen'

  generateProtoTasks {
    all()*.plugins {
      grpc {}
    }
  } //generateProtoTasks
}// protobuf

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            // include self written and generated code
            srcDirs = [ 'src/main/java', 'src-gen/main/grpc', 'src-gen/main/java' ]
        }
        proto {
            srcDirs = [ 'src/main/proto' ]
        }
    }
    // in future add test configuration here
}

startScripts.enabled = false

jar {
    manifest {
        attributes ( 'Main-Class': mainClassName,
                    'Implementation-Title': description,
                    'Implementation-Version': project.version
        )
    }
    archiveBaseName = project.name + '-all'
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    //with jar
}


//delete generated source code when clean
clean {
    delete "src-gen"
}


task helloServer(type: CreateStartScripts) {
    mainClassName = 'com.example.grpc.server.MyGreetingServer'
    applicationName = 'hello-world-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task helloClient(type: CreateStartScripts) {
    mainClassName = 'com.example.grpc.client.MyBlockingGreetingClient'
    applicationName = 'hello-world-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task helloClientAsync(type: CreateStartScripts) {
    mainClassName = 'com.example.grpc.client.MyAsyncGreetingClient'
    applicationName = 'hello-world-client-async'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}


applicationDistribution.into('bin') {
    from(helloServer)
    from(helloClient)
    from(helloClientAsync)
    fileMode = 0755
}